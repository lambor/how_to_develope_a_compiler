options {
	STATIC = false;
	DEBUG_PARSER = true;
	UNICODE_INPUT = true;
}

//white spaces
SPECIAL_TOEKN: { <SPACES: ([" ","\t","\n","\r","\f"])+> }

//comment
MORE: { <"/*"> : IN_BLOCK_COMMENT }
<IN_BLOCK_COMMENT> MORE: { <~[]> }
<IN_BLOCK_COMMENT> SPECIAL_TOKEN: { <BLOCK_COMMENT: "*/"> : DEFAULT }

//reserved words
TOKEN: {
      <VOID     : "void">
    | <CHAR     : "char">
    | <SHORT    : "short">
    | <INT      : "int">
    | <LONG     : "long">
    | <STRUCT   : "struct">
    | <UNION    : "union">
    | <ENUM     : "enum">
    | <STATIC   : "static">
    | <EXTERN   : "extern">
    | <CONST    : "const">
    | <SIGNED   : "signed">
    | <UNSIGNED : "unsigned">
    | <IF       : "if">
    | <ELSE     : "else">
    | <SWITCH   : "switch">
    | <CASE     : "case">
    | <DEFAULT_ : "default">
    | <WHILE    : "while">
    | <DO       : "do">
    | <FOR      : "for">
    | <RETURN   : "return">
    | <BREAK    : "break">
    | <CONTINUE : "continue">
    | <GOTO     : "goto">
    | <TYPEDEF  : "typedef">
    | <IMPORT   : "import">
    | <SIZEOF   : "sizeof">
}

//identifier
TOKEN: {
    <IDENTIFIER: ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "_", "0"-"9"])*>
}

//integer
TOKEN: {
    <INTEGER: ["1"-"9"] (["0"-"9"])* ("U")? ("L")?
            | "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+ ("U")? ("L")?
            | "0" (["0"-"7"])* ("U")? ("L")?
            >
}

//character
MORE: { <"'"> : IN_CHARACTER }                         // rule1
<IN_CHARACTER> MORE: {
      <~["'", "\\", "\n", "\r"]> : CHARACTER_TERM      // rule2
    | <"\\" (["0"-"7"]){3}>      : CHARACTER_TERM      // rule3
    | <"\\" ~[]>                 : CHARACTER_TERM      // rule4
}
<CHARACTER_TERM> TOKEN: { <CHARACTER: "'"> : DEFAULT } // rule5

//string
MORE: { <"\""> : IN_STRING }                           // rule1
<IN_STRING> MORE: {
      <(~["\"", "\\", "\n", "\r"])+>                   // rule2
    | <"\\" (["0"-"7"]){3}>                            // rule3
    | <"\\" ~[]>                                       // rule4
}
<IN_STRING> TOKEN: { <STRING: "\""> : DEFAULT }        // rule5




//whole source file
compilation_unit(): {}
{
	import_stmts() top_defs() <EOF>
}


//import statments
import_stmts(): {}
{
	(import_stmt())*
}

import_stmt(): {}
{
	<IMPORT> name() ("." name())* ";"
}

name(): {}
{
	<IDENTIFIER>
}


//definations
top_defs(): {}
{
	(
	 LOOKAHEAD(storage() typeref() <IDENTIFIER> "(")
	 defun()
	 | LOOKAHEAD(3)
	 defvars()
	 | defconst()
	 | defstruct()
	 | defunion()
	 | typedef()
	)*
}

storage(): {}
{
	[<STATIC>]
}


//variables defination
defvars(): {}
{
	storage() type() name() ["=" expr()]
		("," name() ["=" expr()])* ";"
}


//function defination
defun(): {}
{
	storage() typeref() name() "(" params() ")" block()
}

params(): {}
{
	LOOKAHEAD(<VOID> ")") <VOID>
	| fixedparams() ["," "..."]
}

fixedparams(): {}
{
	params() (LOOKAHEAD(2) "," param())*
}

param(): {}
{
	type() name()
}

block(): {}
{
	"{" defvar_list() stmts() "}"
}


//struct and union defination
defstruct(): {}
{
	<STRUCT> name() member_list() ";"
}

defunion(): {}
{
	<UNION> name() member_list() ";"
}

member_list(): {}
{
	"{" (slot() ";")* "}"
}

slot(): {}
{
	type() name()
}


//typedef
typedef(): {}
{
	<TYPEDEF> typeref() <IDENTIFIER> ";"
}

type(): {}
{
	typeref()
}

typeref(): {}
{
	typeref_base()
	( 
	 LOOKAHEAD(2) "[" "]"
	 | "[" <INTEGER> "]"
	 | "*"
	 | "(" param_typerefs() ")"
	)*
}

typeref_base(): {}
{
	<VOID>
	| <CHAR>
	| <SHORT>
	| <INT>
	| <LONG>
	| LOOKAHEAD(2) <UNSIGNED> <CHAR>
	| LOOKAHEAD(2) <UNSIGNED> <SHORT>
	| LOOKAHEAD(2) <UNSIGNED> <INT>
	| <UNSIGNED> <LONG>
	| <STRUCT> <IDENTIFIER>
	| <UNION> <IDENTIFIER>
	| LOOKAHEAD({isType(getToken(1).image)}) <IDENTIFIER>
}

//statments
stmts(): {}
{
	(stmt())*
}

stmt(): {}
{
	( 
	";"
	| LOOKAHEAD(2) labeled_stmt()
	| expr() ";"
	| block()
	| if_stmt()
	| while_stmt()
	| dowhile_stmt()
	| for_stmt()
	| switch_stmt()
	| break_stmt()
	| continue_stmt()
	| goto_stmt()
	| return_stmt()
	)
}

//if condition statment
if_stmt(): {}
{
	<IF> "(" expr() ")" stmt() [LOOKAHEAD(1) <ELSE> stmt()]
}

//while loop statment
while_stmt(): {}
{
	<WHILE> "(" expr() ")" stmt()
}

//for loop statment
for_stmt(): {}
{
	<FOR> "(" [expr()] ";" [expr()] ";" [expr()] ")" stmt()
}

//break statment
break_stmt(): {}
{
	<BREAK> ";"
}

//return statment
return_stmt(): {}
{
	LOOKAHEAD(2) <RETURN> ";"
	| <RETURN> expr() ";"
}

expr(): {}
{
	LOOKAHEAD(term() "=")
	term() "=" expr()
	| LOOKAHEAD(term() opassign_op())
	term() opassign_op() expr()
	| expr10()
}

opassign_op(): {}
{
	( 
	"+="
	| "-="
	| "*="
	| "/="
	| ""
}
